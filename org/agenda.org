#+TITLE: Agenda - Introduction to programming in Python
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Summer school 2023
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:R :results output :noweb yes :session *R* :exports both
#+property: header-args:python :results output :noweb yes :session *Python* :exports both
* DONE Day 1: Entry survey analysis and course overview
#+attr_latex: :width 300px
[[../img/dataScientistIn50days.jpg]]

- [X] Go to Canvas ([[https://lyon.instructure.com/courses/1700][lyon.instructure.com]])
- [X] Open Zoom ([[https://lyon-edu.zoom.us/j/85828233316][lyon-edu.zoom.us/j/85828233316]])
- [X] Entry *survey* - [[https://docs.google.com/forms/d/1yz2EtuSin3r54zMG1d_JCnnVAGb0XI8cP-Yvr7FmZbo/edit#responses][review of your responses]].
  - What is the OS and why is it relevant to programming?
  - What is the command line and why is it important?
  - Which languages do you already know (10!): FORTRAN, Visual BASIC,
    SQL, R, Stata, Java, C#, Python,C,Lua
  - Topics wanted: 1) *webscraping*, 2) *Machine learning*, 3) Cybersecurity
  - Tools: VS Code/Emacs IDEs known
  - Terror: I will never show up drunk (in class or anywhere)
  - Time: 120 min in class, 180 min outside of class (per day)
    1) class: 15 min check in and review
    2) class: 90 min lecture + practice
    3) class: 15 min summary, questions, outlook
    4) home: 30-90 min DataCamp + 60-120 min revision/assignments
- [ ] Course *overview* - assignments, grading, topics, platforms.
- [ ] *Practice:* a first (literate) Python program & platforms.
- [ ] First *assignment*: "Getting started in Python" @DataCamp.

** In-class summary

- The terminal allows the user to communicate with the OS.
- Python comes in different versions.
- Python (and all apps) need to be built/compiled for an OS.
- Microsoft (and others) combines technical and commercial interests.
- Python [the interpreter] is written in C.
- There are (many) different layers of software between user and
  machine (which leads to greater usability/lower performance).

** Homework

- Register with GitHub, DataCamp, replit.com
- Get access to Canvas for materials and for Zoom
- "Infinite skills" exercise

* DONE Day 2: Python scripting infrastructure practice I
#+attr_latex: :width 300px
[[../img/0_highways.jpg]]

(A [[https://github.com/birkenkrahe/py/][PDF and an Org-mode version of this exercise]] are on GitHub)

** Infinite skills - infinite resources
#+attr_latex: :width 200px
[[../img/infinite.jpg]]

[[https://lyon.instructure.com/courses/1700/discussion_topics/4347][Canvas announcement]]

- A math app that you cannot cheat with - an honor math app
- A resource matching app: e.g. match labor supply with demand (really
  efficiently), possibly including a market and negotiation engine
- A game where the world generates itself as soon as you reach the end
  of it including quest lines, NPCs
- An Internet Wayback machine without the snags where you can retrieve
  a version of a website fast and very granularly
- A script that can reach into SQL and pull values out of a column to
  monitor daily changes in the columns, e.g. money

#+begin_quote
My infinite skills Python projects:
1. An application that lets students know which remote or in-person
   data science internships are currently available in the USA.
2. An application that predicts cancer risk from medical images with
   no false negatives (i.e. images that show cancer but were not
   labeled as such).
3. An application that shows me the (publicly available) syllabi of
   all courses (world-wide) with the title and content of my upcoming
   courses.
4. An application that provides real-time insight into Lyon College
   data, especially retention, grade average, finance, incoming
   students, alumni vs. visitor data.
5. An application that finds funding opportunities, pre-fills them
   with available data (publications, personal, location) and
   identifies next steps.
6. An application based on a speech assistant coupled with a
   conversational chat bot that submits: early alerts, grades,
   summaries after each class as announcements.
#+end_quote

** Day review (and test preview)
#+attr_latex: :width 300px
#+caption: Family packing fruit, Sydneay 1911 (Flickr.com)
[[../img/review.jpg]]

/We review yesterday's material. These questions will resurface in the
weekly multiple-choice tests, i.e. you can use this to prepare./

1) What's a computer terminal?
   - A window to communicate with the Operating System (OS)
   - A command line interface (CLI)
   - A place to enter shell commands (like ~cd~)

2) What are three strengths and three weaknesses of Python?
   | STRENGTH                     | WEAKNESS                |
   |------------------------------+-------------------------|
   | Easy to learn and to read    | Performance (speed)     |
   | Data science applications    | Significant indentation |
   | Automation and small scripts | Platform requirements   |

3) What language is the Python interpreter written in?
   #+begin_quote
   Answer: in the C programming language (which allows programming
   'close to the machine' (making full use of its resources).
   #+end_quote

4) What are we going to use Schoology for in this course?
   #+begin_quote
   Answer: for nothing. We use the Canvas learning management system,
   GitHub, DataCamp, replit.com, IDLE and Google Colaboratory.
   #+end_quote

5) What's our policy regarding the use of AI coding assistants?
   #+begin_quote
   Answer: it's allowed as long as you reference and document your
   use.
   #+end_quote

6) What does Google Colab provide but Python's IDLE does not?
   #+begin_quote
   Answer: An interactive notebook
   #+end_quote

7) What's the difference between a compiled language (for example C)
   vs. an interpreted language (for example Python or R)?
   #+begin_quote
   - Compiler: Human-readable source code is compiled to a
     machine-readable file that needs to be executed for results.
   - Interpreter: source code is read and executed line by line at
     runtime, and no executable file is produced.
   - Both compiler and interpreter are specific to the underlying
     computer architecture.
   #+end_quote

** Practice
#+attr_latex: :width 300px
#+caption: RAAF crew woring on newly arrived Lockheed aircraft (1940)
[[../img/practice.jpg]]

- Find Python on your computer
- Find Python for download to your PC on the web
- Starting and using Google Colab, IDLE, DataCamp and replit.com
- Understand the "literate programming concept"
- Understand when we're using Colab + IDLE + replit.com
- Options for creating and running Python scripts
- Creating and running our first ever Python script

** In-class summary - what did we discuss today?
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].
- Practice file as PDF ([[https://github.com/birkenkrahe/py/blob/main/pdf/0_course_practice.pdf][class handout]])
- Windows' Command Line Interface: finding and opening the terminal,
  prompt, absolute/relative path, root and file tree, CLI commands and
  options; ~cd~, ~python~, ~ls~, ~whoami~.
- Python's IDLE: interactive shell ~>>>~, getting ~help()~ and finding
  documentation; Python keywords, symbols and modules (libraries).
- Python's file editor: printing a greeting in Python (hello world)
  with ~print~. Default arguments. Comments (~#~), ~.py~ file types,
  debugger and traceback. Keyboard interrupt (~CTRL + c~).
- Literate programming: weaving documentation and tangling source code
  from a literate file that contains text + code + output. With Emacs:
  one document with code in < 44 languages.
- Google's Colab: code and text cells, scratch cell, GDrive backup,
  GitHub gist export, auto-completion, interactive notebooks with
  IPython (~.ipynb~), ~matplotlib~ and ~numpy~ modules. ~import~, lineplot
  with ~pyplot~. Colab dashboard. Markdown with ~#~ (headline).

** Homework: first assignment
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

- The problem: [[https://lyon.instructure.com/courses/1700/assignments/14493][word count]].
- Requirements:
  1) Google Colab (platform for submission)
  2) String manipulation (function ~str.count~)
  3) Getting input (function ~input~)
  4) Storing variables with ~=~
  5) Printing numeric output as string with ~str~
  6) Bonus: nesting functions

* DONE Day 3: Infrastructure practice II: DataCamp, REPL
#+attr_latex: :width 400px
#+caption: Obituary page for Jason Anderson (willisfs.com)
[[../img/jason.png]]

Change of plans: *We will *not meet in class on Thursday, 24 May*. I'd
like to be able to attend both the visitation and the memorial service
for Jason Anderson ([[https://www.willisfs.com/obituary/Jason-Anderson][â€ ]]) myself tomorrow from 1 pm - 3 pm (Brown
Chapel).

Instead, please work through the remainder of the practice file
(handout and [[https://github.com/birkenkrahe/py/blob/main/pdf/0_course_practice.pdf][here on GitHub]]) *on your own*. Both sessions can be done
online from the comfort of your home:
1) Open a browser with two windows, and work through the exercises for
   replit.com and DataCamp workspaces line by line.
2) Essentially, both environments offer file editor + interactive
   Python shell + OS shell in one window.
3) Replit.com is more like IDLE, while the DataCamp workspace is an
   interactive notebook like Colab.
4) Python-wise, this is essentially "hello world" again.

This shouldn't take more than an hour. Use the remaining time to get
started with your [[https://app.datacamp.com/groups/lyon-college-data-science-spring-2023/assignments][DataCamp assignments]] (15 chapters in total,
requiring no less than 15 hours of practice).

In the middle of our taking off for flight, it might be worthwhile
highlighting some logistics to help you review past sessions if you so
choose:

1) You can find the *session review/test preview* information, and a
   summary of the last session in the agenda file here in GitHub
   ([[https://github.com/birkenkrahe/py/blob/main/pdf/agenda.pdf][PDF]] or [[https://github.com/birkenkrahe/py/blob/main/org/agenda.org][HTML]]).
2) You can find all *practice and lecture files* in the PDF directory
   here in GitHub ([[https://github.com/birkenkrahe/py/tree/main/pdf][PDF]] or [[https://github.com/birkenkrahe/py/tree/main/org][HTML]]): I just went through it myself to
   review today.
3) Lastly, photos of the *whiteboard* writings and drawings are
   available [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][here in GDrive]].

I'm looking forward to seeing you on Friday to cover Python
expressions, variables and statements with more practice exercises.

Any questions, you know where to find me!

Cheers

* DONE Day 4: Expressions, Variables, Statements
#+attr_latex: :width 400px
#+caption: Thirteen men doing acrobatics (LOC)
[[../img/acrobats.jpg]]

** Adding the course calendar to Google calendar
#+attr_latex: :width 400px
#+caption: Canvas calendar with course events
[[../img/calendar.png]]

- Find ~Calendar~ in leftmost Canvas sidebar
- Check "Introduction to Programming in Python"
- Click ~Calendar Feed~ (lower right)
- Import URL in Google calendar

** Using Python chat in GMail outside class
#+attr_latex: :width 400px
#+caption: Google Python chat space members
[[../img/space.png]]

** Day review (and test preview)
#+attr_latex: :width 300px
#+caption: Family packing fruit, Sydneay 1911 (Flickr.com)
[[../img/review.jpg]]

/We review yesterday's material. These questions will resurface in the
weekly multiple-choice tests, i.e. you can use this to prepare./

1) What's the difference between an absolute and a relative path?
   #+begin_quote
   Answer: The *absolute* path always begins at the root directory, the
   origin of the file tree (e.g. ~C:\~ on Windows, or ~/~ on Linux), while
   the *relative* path specifies a location relative to your current
   directory (~PWD~).
   #+end_quote

2) You know 4 different Python shells already - which are they?
   #+begin_quote
   - The interactive Python shell in IDLE (~>>>~)
   - The IPython code cell in Google Colab (~[1]~)
   - The console in replit.com ~>~
   - The shell opened in a terminal with the ~python~ command
   #+end_quote

3) Which features does the IPython shell (e.g. in a Colab code cell)
   have?
   #+begin_quote
   - Auto-completion of keywords like ~print~ and user-defined variables
   - Integration of pre-installed modules like ~matplotlib~ for plotting
   #+end_quote

4) Are your Google Colab notebooks saved anywhere?
   #+begin_quote
   Yes, they are automatically saved in the ~Colab Notebooks~ directory
   in your Google drive (~w:\My Drive\~ on Windows @Lyon).
   #+end_quote

5) What can you do with the ~#~ symbol?
   #+begin_quote
   - Comment lines in a ~.py~ Python file
   - Comment on the interactive Python shell
   - Create headlines in a Colab text cell ("markdown markup")
   #+end_quote

6) What does DataCamp workspace offer?
   #+begin_quote
   - Linux shell
   - Interactive Python console
   - Python file editor
   - Interactive Jupyter notebook
   - plus a few JupyterLab gadgets (launcher)
   #+end_quote

** DataCamp lessons / practice
#+attr_html: :width 200px
[[../img/datacamp_practice.png]] [[../img/datacamp_practice1.png]] [[../img/datacamp_practice2.png]] [[../img/datacamp_practice3.png]]

Some questions for test 1 will come from the "Python Basics" chapter
of the "Introduction to Python" course on DataCamp (you can practice).

Please note the (new) [[https://lyon.instructure.com/courses/1700/assignments][deadlines for the three DataCamp courses]]. These
courses amount to 60% of the home assignment grade. The remaining
points will come from 8 programming assignments (like "word count").

** Lecture/practice: Python Basics
#+attr_latex: :width 300px
#+caption: Lecture renversante by Totoffff (Flickr.com)
[[../img/lecture.jpg]]

- Expressions
- Variables
- Statements

** Python chat
*** Using Anaconda

Jonathan Tucker: If you need a different Python version for running a
program (that requires a specific version) what application would you
use to create this? I need to be able to run the newest version of
Python and switch between the older version seamlessly.  I'm looking
at using Conda to give the program its own Python environment (with
the correct version), does this make sense?

Answer: Yes this does make sense. Anaconda may be overkill though -
you ought to be aware of the bare metal alternative which is Python's
virtualenv. The purpose is not so much to switch between versions fast
but to have different environments for your production code. If you're
a lone developer though why not just have different versions on your
machine. I do that with R all the time (whenever I upgrade), and R (or
Emacs) allow me to call upon any version when I want to. So I would
probably give virtualenv a try if I had to. Currently, I have 3.11 and
3.9 on Windows, 3.8 on Ubuntu, but all of them still on the same
PC. Here is a recent comparison of the two:
https://dataaspirant.com/anaconda-python-virtualenv/. Or what I would
probably do is write a shell script that uses one command (python) and
switches between different versions. If you use Conda, you will not
understand how it's done. If you use virtualenv, you understand a
little more (it requires knowledge of the file tree at least, and
environment variables), and if you write your own scripts, you're tha
master of the universe :-) (However, if you ask me "send me that
script" I'd have to do some research first.) Hope this helps.

*
*

*

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- An instruction that evaluates to a single value is an
  *expression*. An instruction that doesn't is a *statement*.
- Data types are: integer (~int~), floating-point (~float~), string (~str~)
- Strings hold text and begin and end with quotes: ~â€˜Hello world!'~
- Strings can be concatenated (~+~) and replicated (~*~)
- Values can be stored in variables: ~spam = 42~
- Variables can be used anywhere where values can be used in
  expressions: ~spam + 1~
- Variable names: one word, letters, numbers (not at beginning),
  underscore only


* DONE Day 5: Keyboard input and first look at functions
#+attr_latex: :width 300px
#+caption: Women on a tandem bicycle, 28 September 1938 (Flickr.com)
[[../img/three.png]]

- [X] User interaction: Keyboard input, error and output
- [X] Functions: getting help, arguments, parameters
- [X] The caret operator in Python and the binary function
- [ ] Three problems: string replication, splitting, math constants

** The caret ~^~ operator in Python

- Use ~**~ for exponentiation and not ~^~ (as in R). In Python, the caret
  operator ~^~ is the binary ~XOR~ operator: it compares two binary
  numbers and returns a binary with bits set to 1 where the
  corresponding bits of the operations differ:
  #+begin_src python :results output
    print(2**4)   # prints 16
    print(2^4)    # prints 6...?
    print('binary: ', bin(2)[2:])   # binary for 2
    print('binary: ', bin(4)[2:])   # binary for 4
    print('binary: ', bin(6)[2:])   # binary for 6
  #+end_src

** Python chat
*** PDF scraping
For those who are interested: following up from Radek's question about
PDF meta data extraction (author, affiliation), I played around a
little and came up with this:
https://gist.github.com/birkenkrahe/8b958852165982daa8501014127c23d7 -
I didn't find it easy (HTML is textual markup, not binary, and much
more forgiving) but I learnt something. At the top there is a link to
a book which I did not read or use (it's from 2018 and the package I
used was PyPDF4 and not PyPDF2).
** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

[[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

- Scrum - agile project management (from: software engineering)
- IMRaD - Introduction, Method, Results and Discussion (sci publish)
- Three data streams: standard input, standard output, standard error
- Difference between printing strings with ~+~ vs. ~,~
- Overloading operators like ~+~ and ~*~
- Getting keyboard input with/without prompt using ~input~
- ~input(prompt='')~ is not the same as ~input(prompt=None)~
- Downlading ~.py~ scripts from Colab
- Multi-line comments with ~"""~
- Getting a function's docstring with ~?~
- Details on ~print~, ~len~, ~input, ~str~, ~int~ and ~split~
- (Bonus) Home assignment with ~strip~

- *Project presentation:* completely free-form. If you code, you can use
  Colab or anything else that lends itself to be presented easily. You
  do not have to go out of your way to produce fancy powerpoints.

** Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

*** (Bonus) Star Wars: A New Hope
#+attr_latex: :width 200px
#+caption: 15th anniversary poster of Star Wars (1992)
[[../img/starwars.png]]

*Problem:* Repeat the word ~far~ exactly ~N~ times in the following output
format: ~A long time ago, in a galaxy far, far away...~

Create a notebook ~newHope.ipynb~ and submit the URL:
1) Problem
2) Flow
3) Variables
4) Functions
5) Implementation

Original problem: "[[https://dmoj.ca/problem/wc15c2j1/pdf][A New Hope]]".

- Tip: the ~str.strip()~ function removes trailing characters from ~str~:
  #+begin_src python :results output
    stripped = '   green leaves    leaves green   '.strip()
    print(stripped)
  #+end_src

  #+RESULTS:
  : green leaves    leaves green

- This is much like the problem 'spooky season' that we covered in
  class.
- If you submit a solution, I'll share my solution notebook with you.

* DONE Day 6: Flow control and flow visualization
#+attr_latex: :width 400px
#+caption: Roman Guy, Against the Flow (Flickr.com)
[[../img/flow.jpg]]

** Preview and review

1) What does the expression ~str(int(age) + 1)~ do?
   #+begin_quote
   [[https://automatetheboringstuff.com/eval/3-4.html][Here is an HTML animation]] (Sweigart, 2023)
   #+end_quote
   1) ~age~ is string ~input~
   2) ~int(age)~ converts the string to a number - you cannot do that
      with any character like "a": ~int("a")~ throws an error. To convert
      characters to their Unicode standard, you need to use ~ord~:
      #+begin_src python
        print(int("25"))
        print(ord("a"))
        print(ord("A"))
      #+end_src

      #+RESULTS:
      : 25
      : 97
      : 65
   3) ~int(age) + 1~ adds 1 to whatever number ~int(age)~ evaluates to:
      #+begin_src python
        age = "25"
        print(age)
        print(age + " years old")
        print(int(age))
        print(int(age)+1)
      #+end_src

      #+RESULTS:
      : 25
      : 25 years old
      : 25
      : 26
   4) ~str(int(age) + 1)~ converts the result to a string:
      #+begin_src python
        age = "25"
        print(age)
        print(age + " years old")
        print(int(age))
        print(int(age)+1)
        print(str(int(age)+1))
        print(str(int(age)+1) + " years old")
      #+end_src

2) What do you get when you type ~ord?~ on the Python console (~>>>~)?
   #+begin_quote
   A ~SyntaxError~ because ~?~ is an IPython shell command only.
   #+end_quote

3) What does the dot-operator do, e.g. in ~str.split~?
   #+begin_quote
   The dot-operator ~.~ is an /accessor/: it allows you to access anything
   that's stored inside an object, e.g. the /string/ class ~str~, or an
   instance of that class, a particular string: e.g. ~'three'.count('')~
   #+end_quote
   #+begin_src python :results output
     print('three'.count(''))   # count empty spaces = characters
     print('three'.count(' '))  # count empty spaces
   #+end_src

   #+RESULTS:
   : 6

4) What does ~'a'.split()~ return?
   #+begin_src python
     result = 'a'.split()
     print(result)
     print(type(result))
   #+end_src

   #+RESULTS:
   : ['a']
   : <class 'list'>

5) How can you split ~'1-2-3'~?
   #+begin_src python
     print('1-2-3'.split('-',3))
   #+end_src

   #+RESULTS:
   : ['1', '2', '3']

6) How can you get 3 as a number from the keyboard and store it as an
   integer variable ~num~?
   #+begin_src python
     num = input('Enter the number 3: ')
     print('num is a string:', isinstance(num,str))
     num = int(num)
     print('num is a integer now:', isinstance(num,int))
   #+end_src

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

- Unicode standard used to represent a characters and symbols ([[https://docs.python.org/3/howto/unicode.html][doc]])
- Strings are instances of the ~str~ class, which contains functions
  like ~strip~, ~split~, ~count~ (enter ~dir(str)~ to see all of them.
- To get any function (aka method) that lives 'inside' ~str~ (like a
  tool in a toolbox), use the accessor dot-operator: ~str.split()~.
- To test if a variable ~x~ is an integer or a string, you can use
  ~isinstance(x, int)~ or ~isinstance(x, str)~ (returns Boolean).
- Another way of describing 'object orientation' is to say that
  'everything is an object' and 'objects exchange messages'.
- Operator to convert characters to unicode and back: ~ord~ and ~chr~.
- Building process models: flowcharts, BPMN, UML
- BPMN elements {events, tasks, gateways, participants, flow}, and
  rules {one start/end event per pool, only message flows between and
  only sequence flows inside pools, complete gateway splits, no
  hanging elements}.
- Inserting images and links in Google Colab text cells
- Flow control: Boolean values and operators, comparison operators
- Advantages and disadvantages of diagrammatic models

** Python Chat
*** Machine zero vs mathematical zero

Here is really very nice visualization of the floating-point
representation in computers, which we discussed today:
https://fabiensanglard.net/floating_point_visually_explained/. The
related section in the Python reference manual is here:
https://docs.python.org/3/tutorial/floatingpoint.html.

*** Unicode
Here is the [[https://docs.python.org/3/howto/unicode.html][Unicode documentation]] from the Python reference
manual. After a short, very readable explanation, you get a bunch of
small examples. Some of the commands we haven't learnt yet (like
~try~ ... ~except~ exception handling, but we'll get there).
*** BPMN poster
Here is the free BPMN poster from Signavio (that's professional BPMN
software owned by SAP. I have a free academic license if anyone's
interested, just let me know):
https://www.signavio.com/downloads/short-reads/free-bpmn-2-0-poster/
** Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

- *Only if you did not finish this exercise in class:*
  1) Model our first Python program as a BPMN model using ~bpmn.io~:
     #+attr_latex: :width 300px
     [[../img/bpmn1.png]]  [[../img/bpmn2.png]]
  2) Start with a pool and name it ~Computer~.
  3) Add suitable events and tasks connected by sequence flow.
  4) Take a screenshot. It should look [[https://github.com/birkenkrahe/admin/blob/main/RoamNotes/img/py_first.png][like this]].
  5) Add another pool and name it ~User~.
  6) Connect the two pools with suitable (message) flow.
  7) Take another screenshot. It should look [[https://github.com/birkenkrahe/admin/blob/main/RoamNotes/img/py_first_user.png][like this]].
  8) Save your diagram as ~.bpmn~ and as ~.svg~ files.
  9) Add your ~.svg~ diagram in a titled Colab text cell:
  10) Upload your diagram to a drive and link to it in the text cell.

  #+attr_latex: :width 400px
  [[../img/2_colab_diagram.png]]

Note: BPMN process diagram elements can be /overloaded/, i.e. given meta
information, such as 'tasks accepts input' or 'task sends output' (see
overloaded diagrams [[https://github.com/birkenkrahe/admin/blob/main/RoamNotes/img/py_first_overloaded.png][here]] and [[https://github.com/birkenkrahe/admin/blob/main/RoamNotes/img/py_first_user_overloaded.png][here]]). [[https://camunda.com/bpmn/reference/][More about BPMN from camunda.com.]]

* DONE Day 7: Boolean conditions and clauses
#+attr_latex: :width 400px
#+caption: Radio station Children's Christomas Party 1936 (Flickr.com)
[[../img/claus.jpg]]

** [[https://lyon.instructure.com/courses/1700/assignments][I shelved the 3rd DataCamp assignment!]]

INFORMAL OPEN TOOL POLL:
- Have you used the *DataCamp workspace* at this point? (Y)
- Have you used the *REPL in replit.com* at all? (Y)
- Have you used *Python's IDLE* outside of class? (Y)
- Have you opened a *Python shell* ~>>>~ outside of class? (Y)
- Are you satisfied with Colab as your only tool? (N)
- In case you want to try Emacs, talk to me. (?)

** Preview and review

1) What is a 'Pythonista'? Are you one?
   #+begin_quote
   The term describes anyone who is enthusiastic about Python and
   actively engages with the language and with its community. Your
   call!
   #+end_quote

2) Which diagrammatic languages for flow modeling do you know?
   #+begin_quote
   1. BPMN (Business Process Model and Notation)
   2. UML (Unified Modeling Language)
   3. Flow charts
   #+end_quote

3) What do you have to think of when adding a gateway to a process
   model to model a decision point?
   #+begin_quote
   Unlike in a flowchart, the gateway, once opened, needs to be closed
   again to mark the end of the logical operation. One practical effect
   is that it is easier to remove decisions from processes because
   their beginning and end is clear.
   #+end_quote

4) What's the difference between ~n=1~ and ~n==1~?
   #+begin_quote
   1. ~n=1~ is a statement while ~n==1~ is an expression
   2. ~n=1~ stores 1 in an integer variable ~n~
   3. ~n==1~ compares the value in ~n~ with the value 1
   #+end_quote

5) How can you get ~42 == '42'~ to evaluate to ~True~?
   #+begin_src python :results output
     # By explicitly converting the data types
     print(str(42) == '42')
     print(42 == int('42'))
   #+end_src

   #+RESULTS:
   : True
   : True

6) What is ~42.0 == 42~?
   #+begin_src python
     # There is automatic type coercion from 42 to 42.0
     print(42.0 == 42)
   #+end_src

   #+RESULTS:
   : True

7) What is ~42 == 'meaning of life'~?
   #+begin_src python
     # comparing an integer and a string will always be False
     # since there is no automatic conversion between the two
     print(42 == 'meaning of life')
   #+end_src

   #+RESULTS:
   : False

8) How can you turn a Unicode point into a character and vice versa?
   #+begin_src python
     # Courtesy Radek
     print(chr(120))
     print(ord('x'))
   #+end_src

   #+RESULTS:
   : x
   : 120

9) How can you check if a variable ~x~ is an integer, float or string?
   #+begin_src python :results output
     x = 42.0
     # these functions check which object class x is an instance of
     print(isinstance(x,float))
     print(isinstance(int(x),int))
     print(isinstance(str(x),str))
     # or you can use type(x)
   #+end_src

   #+RESULTS:
   : True
   : True
   : True

10) How can you check if a value is in a list or not?
    #+begin_src python
      print('a' in ['a','b'])
      print('a' not in ['a','b'])
      print('a' in ['b','c'])
      print('a' not in ['b','c'])
      print(0 in [1, 100, 0])     # etc.
    #+end_src

    #+RESULTS:
    : True
    : False
    : False
    : True
    : True

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].
- Programming in this "AI age" requires these skills: 1) modeling, 2)
  navigating infrastructure, 3) documenting, 4) presenting, 5)
  debugging own code, 6) debugging AI code, 7) coding, 8)
  AI-prompting.
- Boolean operators in mathematics, Python and LaTeX.
- Operator precedence: 1) (), 2) **,%,*/,+-, 3) <, <=, >, >=, in, not
  in, 4) not, and, or.
- Splitting a string without substrings, changing the separator (~sep~)
- Checking data type with ~isinstance([var],[type])~
- Minimal conditional statement ~if [condition]: [action]~ with keyword
  (~if~),and ~separator~ (~:~).
- Clauses and indentation rules in Python.
- Code blocks in other languages. If in C and R vs. Python.
- Simple if-statement and if-else statement with BPMN process model.

** Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

*** De Morgan's laws revisited

- In class, you showed that De Morgan's laws hold in Python. Now,
  instead of printing ~True~ after each statement,
  1) print only the number of ~True~ statements at the end.
  2) print the final statement using string concatenation
  3) print the final statement using an f-string

- The output could simply look like this:
  #+begin_example org
    Number of True statements: 8
  #+end_example

- *Tip:* Boolean conditions are the core of making decisions. They can
  be put in an ~if~ statement like this:
  #+begin_example python
    if [condition]: [do_something]
  #+end_example

- *Tip:* string concatenation relies on strings being 'added' with
  ~+~. Boolean values ~True~, ~False~ are not strings and need to be
  converted to be concatenated.

- *Tip:* The f-string is recent addition to Python 3. A ~print~ argument
  pre-fixed with an ~f~ can print variables without ~,~ or ~+~
  operators. Instead, variables have to be enclosed in ~{ }~:
  #+begin_src python
    whoami = 'Marcus Birkenkrahe'
    print(f"My name is {whoami}")
  #+end_src

  #+RESULTS:
  : My name is Marcus Birkenkrahe

* DONE Day 8: Loops and breaks (continue'd)
#+attr_latex: :width 400px
#+caption: A Fokker looping (1915-20), Library of Congress@Flickr.com
[[../img/loop.jpg]]

** TODO Preview and review

1) *Python chat:* ~pandas~ is a Python library for data frame creation and
   manipulation. I've created [[https://colab.research.google.com/drive/1JaLBpbFTOuDZzITcYR5TNvsQwiqoFUiT?usp=sharing][this notebook]] to explain how to use it
   to import CSV datasets via URL or as a file. We'll get back to
   ~pandas~.

2) What does a /flow control statement/ consist of?
   #+begin_quote
   - a /condition/ (expression), e.g. ~count == 1~
   - a /clause/ (block of code), e.g. ~count = count + 1~
   #+end_quote

3) Is Python the only programming language with significant
   indentation?
   #+begin_quote
   No. Haskell, COBOL are two other (obscure) high-level languages
   that share this fate, as do many meta-languages (Markdown, Org,
   YAML).
   #+end_quote

4) What are the elements of a conditional block?
   #+begin_quote
   1) Keyword ~if~
   2) Conditional expression
   3) Separator ~:~
   4) Code block starting on the next line
   #+end_quote
   Example:
   #+begin_src python
     import datetime
     now = datetime.datetime.now()
     if now.strftime('%m-%d') == '06-01':
         print('June is here')
   #+end_src

   #+RESULTS:
   : June is here

5) How would you get the docstring for the method ~now~?
   #+begin_src python
     help(datetime.datetime.now)
   #+end_src

6) Now, travel back through time to the end of yesterday's session:
   1. Create a code block with 3 lines of code.
   2. Assign ~name~ and ~age~ to ~'Carol'~ and ~10~.
   3. If ~name~ is 'Alice' then greet Alice.
   4. Otherwise, greet a stranger.
   5. This is the process you should have created:
      #+attr_latex: :width 400px
      [[../img/py_alice_2.png]]
   6. Now, we'll generalize this to allow for more than one (exclusive)
      alternative by introducing the ~elif~ clause.
   7. Python code:
      #+begin_src python
        name, age = 'Carol', 10
        if name == 'Alice': print('Hi, Alice')
        else: print('Hello, stranger')
      #+end_src
      - If there's only a single statement, Python does not insist on
      indentation! Indentation is for 'proper' blocks (multiline).

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

- Using ~elif~ with conditional statement to add alternative clauses.
- ~elif~ statements are sensitive to their position in the program.
- The condition of a ~while~ loop needs to be ~True~ to enter the clause.
- Production BPMN diagrams do not have any flow lines looping back.
- ~break~ breaks out of its loop, ~continue~ goes back to the start.
- Use non-Boolean truth values to control ~if~, and ~while~ conditions.
- ~for~ and ~while~ loops are logically fully equivalent: you can always
  turn a ~for~ loop into a ~while~ loop and vice versa.
- The ~range~ function creates a sequence of integer values using its
  ~start~, ~stop~ and ~step~ parameters.

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]
#+attr_latex: :width 400px
#+caption: Some bonus programming assignments
[[../img/bonus.png]]

- This week's programs use all flow control structures that you know.
- Let me know via 'Python Chat' if anything is unclear.
- All of these are original, first-time exercises (likely with errors).

* DONE Day 9: Importing modules
#+attr_latex: :width 400px
#+caption: De Dion-Bouton tricycle towing a passenger (ca. 1919)
[[../img/import.jpg]]

** Review and preview (test 2 is coming soon)

1) What's the template for an ~elif~ statement?
   #+begin_quote
   1) ~elif~ keyword
   2) condition that evaluates to ~True~ or ~False~
   3) separator ~:~
   4) indented clause on the next line
   #+end_quote

2) Does it matter when an (alternative) ~elif~ statement occurs?
   #+begin_quote
   Yes, because the conditional ~if~ statement is left when the
   condition is satisfied, and no further conditions are checked.
   #+end_quote

3) What type of conditional statement is this and how many conditions
   are being tested?
   #+attr_latex: :width 400px
   [[../img/py_alice_5.png]]
   #+begin_quote
   The BPMN process model describes an ~if~, ~elif~, ~else~ logic that
   tests two conditions:
   1. Is the ~name~ 'Alice'? - if not, check:
   2. Is the ~age~ greater than 12?
   #+end_quote

4) How could you check if the input ~name~ is 'Alice' and if she is not a
   minor by ~age~?
   #+begin_example python
     if name == 'Alice' and int(age) > 18:
   #+end_example

5) When is the message "Get ready to host" below printed if the
   variable ~guests~ is entered as keyboard input?
   #+begin_example python
     if int(guests):
        print('Get ready to host')
     else:
        print('No guests')
   #+end_example
   #+begin_quote
   - The condition needs to be ~True~ for the clause to be entered.
   - For the condition ~int(guests)~ to be ~True~, ~guests~ must *not* be
     '0'. (Empty ~''~ input or floating values raise an exception: ~int~
     can only convert strings that represent integer numbers).
   #+end_quote

6) What type of data does a ~while~ condition evaluate to?
   #+begin_quote
   A Boolean value, ~True~ or ~False~
   #+end_quote

7) What is the difference between ~break~ and ~continue~?
   #+begin_quote
   - ~break~ leaves the current (innermost) clause/loop
   - ~continue~ goes back to the condition for another evaluation
   #+end_quote

8) The variable ~data~ is obtained as keyboard input below. When is the
   ~data~ printed?
   #+begin_src python :results output
     while not data:
         data = input("Data? ")
         continue
     print(data)
   #+end_src
   #+begin_quote
   - The ~while~ condition will remain ~True~ until anything is entered.
   - When anything but the empty string is entered, it is printed.
   #+end_quote

9) What is the difference between ~range(10)~, ~range(0, 10)~, ~range(0,
   10, 1)~ and ~range(9,-1,-1) in a ~for~ loop?
   #+begin_src python
     # range(10) starts at 0 goes to 9
     for i in range(10):
         print(i,end=' ')
         print()
         # range(0,10) starts at 0 goes to 9
     for i in range(0,10):
         print(i,end=' ')
         print()
         # range(0,10,1) starts at 0 goes to 9
     for i in range(0,10):
         print(i,end=' ')
         print()
     for i in range(9,-1,-1):
         print(i,end=' ')
         print()
   #+end_src

   #+RESULTS:
   : 0 1 2 3 4 5 6 7 8 9
   : 0 1 2 3 4 5 6 7 8 9
   : 0 1 2 3 4 5 6 7 8 9
   : 9 8 7 6 5 4 3 2 1 0

10) How many Boolean operators can you use in a ~for~ loop with ~range~?
    #+begin_quote
    A ~for~ loop with ~range~ has no condition because the 'stop' condition
    has been absorbed by the ~range~ function. If the 'stop' condition is
    reached, the ~for~ loop is left:
    #+attr_latex: :width 400px
    [[../img/for_while.png]]
    #+end_quote

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

- ~range~ function details: ~type~, counting up and down, ~start~, ~stop~ and
  ~step~ (positional) parameters.
- The Python Standard Library contains ca. 200 of the most important
  modules for controlling the environment, like ~os~, ~sys~, ~random~, ~math~.
- There are more than 200,000 Python packages in the PyPl (the
  official Python Package Index) alone. By comparison: R, another
  popular interpreted open source language, has ca. 20,000 packages.
- Modules (aka libraries) must be imported with ~import~, individual
  functions with ~from [module]~. Use ~sys.modules~ to check which modules
  are imported.
- Use ~sys.exit()~ to exit from any part of the program (not just loops).
- Use ~random.randint(a,b)~ for random integers from [a,b]
- Use ~os.getenv~ to check OS environment variables like ~USER~ (you).
- Planning, implementation and extension of a simple 'guess the
  number' game where you guess a random number drawn by the computer.

** Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

*** Cone drill: using formulas and constants
#+attr_latex: :width 400px
#+caption: Ice cream bliss - LOC@Flickr.com
[[../img/cone.jpg]]

*Problem:* Compute the volume of a cone of radius r and height h.

Create a notebook ~coneDrill.ipynb~:
1) Problem
2) Flow
3) Variables
4) Functions
5) Implementation

- The volume $V$ of a cone of radius $r$ and height $h$ is $V =
  \frac{\pi r^2 h}{3}$.
- To get \pi to a high accuracy, ~import math~. The value of \pi is
  stored in ~math.pi~:
  #+begin_src python :results output
    import math
    print(math.pi)
  #+end_src

Original problem: "[[https://dmoj.ca/problem/dmopc14c5p1/pdf][Cone Drill]]"

[[https://lyon.instructure.com/courses/1700/assignments/14849][See Canvas]] for bonus questions: dealing with input exceptions and
changing the format of the output.


* DONE Day 10: Functions
#+attr_latex: :width 400px
#+caption: Llyfrgell Genedlaethol Cymru / Claerwen Dam (1952)
[[../img/functions.jpg]]

** [[https://lyon.instructure.com/courses/1700/assignments/11921?display=full_width][Review Test 1: Any Questions? Complaints?]]

- Here are the results of test 1 visualized using Python ([[https://gist.github.com/birkenkrahe/4ff216d053a639c7773e607952aeec19][GitHub]])
  using ~matplotlib.pyplot~, and ~pandas~' ~Series~ and ~DataFrame.describe~
  #+attr_latex: :width 400px
  #+caption: Histogram and boxplot of the results of test 1
  [[../img/test1.png]]

- Stats and visualization are much easier to do in R ([[https://github.com/birkenkrahe/grades/blob/main/summer23.org][GitHub]])

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

- Function definition with and without parameters
- Function calls, argument values
- Recursive function calls
- A user-defined character counting function
- Poor naming of function names, parameters, variables
- Return values, the ~return~ statement and returning ~None~
- Extended example: Magic 8 Ball with ~random~

* DONE Day 11: Call stack and local scope
#+attr_latex: :width 400px
#+caption: Llyfrgell Genedlaethol Cymru / Ned and donkey (1875)
[[../img/scope.jpg]]

** Preview and review

1) What is a function and what's another name for them in Python?
   #+begin_quote
   A piece of reusable code, defined by ~def~ followed by the function
   name and parentheses ~()~ with or without parameters inside. Also
   called 'method' in Python.
   #+end_quote
2) What's the difference between a /parameter/ and an /argument/?
   #+begin_quote
   - A function /parameter/ is a variable that stores an /argument/ value
   - A function /argument/ is a value passed on to a /parameter/ variable
   #+end_quote
3) What's wrong with this function definition?
   #+begin_src python
     def function1()
     print()
   #+end_src
4) What does this function return (and how can you show it)?
   #+begin_src python
     def function():
         return
   #+end_src
   #+begin_src python
     print(function())
     print(type(function()))
   #+end_src

   #+RESULTS:
   : None
   : <class 'NoneType'>
5) What's a selective Python module ~import~?
   #+begin_src python
     from math import pi
     print(pi)
   #+end_src

   #+RESULTS:
   : 3.141592653589793
6) What do you need to do to use ~np.array~ instead of ~numpy.array~?
   #+begin_src python
     import numpy as np
     print(help(np.array))
   #+end_src

   #+RESULTS:
   #+begin_example
   Help on built-in function array in module numpy:

   array(...)
       array(object, dtype=None, *, copy=True, order='K', subok=False, ndmin=0,
             like=None)

       Create an array.

       Parameters
       ----------
       object : array_like
           An array, any object exposing the array interface, an object whose
           __array__ method returns an array, or any (nested) sequence.
           If object is a scalar, a 0-dimensional array containing object is
           returned.
       dtype : data-type, optional
           The desired data-type for the array.  If not given, then the type will
           be determined as the minimum type required to hold the objects in the
           sequence.
       copy : bool, optional
           If true (default), then the object is copied.  Otherwise, a copy will
           only be made if __array__ returns a copy, if obj is a nested sequence,
           or if a copy is needed to satisfy any of the other requirements
           (`dtype`, `order`, etc.).
       order : {'K', 'A', 'C', 'F'}, optional
           Specify the memory layout of the array. If object is not an array, the
           newly created array will be in C order (row major) unless 'F' is
           specified, in which case it will be in Fortran order (column major).
           If object is an array the following holds.

           ===== ========= ===================================================
           order  no copy                     copy=True
           ===== ========= ===================================================
           'K'   unchanged F & C order preserved, otherwise most similar order
           'A'   unchanged F order if input is F and not C, otherwise C order
           'C'   C order   C order
           'F'   F order   F order
           ===== ========= ===================================================

           When ``copy=False`` and a copy is made for other reasons, the result is
           the same as if ``copy=True``, with some exceptions for 'A', see the
           Notes section. The default order is 'K'.
       subok : bool, optional
           If True, then sub-classes will be passed-through, otherwise
           the returned array will be forced to be a base-class array (default).
       ndmin : int, optional
           Specifies the minimum number of dimensions that the resulting
           array should have.  Ones will be prepended to the shape as
           needed to meet this requirement.
       like : array_like, optional
           Reference object to allow the creation of arrays which are not
           NumPy arrays. If an array-like passed in as ``like`` supports
           the ``__array_function__`` protocol, the result will be defined
           by it. In this case, it ensures the creation of an array object
           compatible with that passed in via this argument.

           .. versionadded:: 1.20.0

       Returns
       -------
       out : ndarray
           An array object satisfying the specified requirements.

       See Also
       --------
       empty_like : Return an empty array with shape and type of input.
       ones_like : Return an array of ones with shape and type of input.
       zeros_like : Return an array of zeros with shape and type of input.
       full_like : Return a new array with shape of input filled with value.
       empty : Return a new uninitialized array.
       ones : Return a new array setting values to one.
       zeros : Return a new array setting values to zero.
       full : Return a new array of given shape filled with value.


       Notes
       -----
       When order is 'A' and `object` is an array in neither 'C' nor 'F' order,
       and a copy is forced by a change in dtype, then the order of the result is
       not necessarily 'C' as expected. This is likely a bug.

       Examples
       --------
       >>> np.array([1, 2, 3])
       array([1, 2, 3])

       Upcasting:

       >>> np.array([1, 2, 3.0])
       array([ 1.,  2.,  3.])

       More than one dimension:

       >>> np.array([[1, 2], [3, 4]])
       array([[1, 2],
              [3, 4]])

       Minimum dimensions 2:

       >>> np.array([1, 2, 3], ndmin=2)
       array([[1, 2, 3]])

       Type provided:

       >>> np.array([1, 2, 3], dtype=complex)
       array([ 1.+0.j,  2.+0.j,  3.+0.j])

       Data-type consisting of more than one element:

       >>> x = np.array([(1,2),(3,4)],dtype=[('a','<i4'),('b','<i4')])
       >>> x['a']
       array([1, 3])

       Creating an array from sub-classes:

       >>> np.array(np.mat('1 2; 3 4'))
       array([[1, 2],
              [3, 4]])

       >>> np.array(np.mat('1 2; 3 4'), subok=True)
       matrix([[1, 2],
               [3, 4]])

   None
   #+end_example
7) What is the output of this code?
   #+begin_src python
     import numpy as np
     print(help(numpy.array))
   #+end_src
   #+begin_quote
   ~NameError~: name 'numpy' not defined.
   #+end_quote
8) ~array~ is a function in ~numpy~. How do we call it?
   #+begin_src python
     import numpy
     print(numpy.array([1,2,3]))
   #+end_src

   #+RESULTS:
   : [1 2 3]
9) Which command opens up the documentation for ~len~?
   #+begin_quote
   - On the IPython shell (Colab, Jupyter, DataCamp Workspace): ~len?~
   - In IDLE, Python console or any script: ~help(len)~
   #+end_quote
10) What are positional and what are keyboard parameters?
    #+begin_quote
    - Positional parameters must come first in the definition and in
      the function call. Arguments are assigned to them by position
      only.
    - Keyboard parameters must come second in the definition and in
      the function call, after that they come in any order.
    #+end_quote

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- Positional parameters, separator and keyword parameters in functions
- ~None~ value and ~NoneType~, returning from function without value
- ~print~ function arguments: ~end~, ~sep~, ~file~ and ~flush~
- Adding your own keyword arguments to a parameter list
- Call stack with functions calls inside other functions
- Local vs. global scope
- Local and global variables with the same name
- Defining a function inside a function (preview)
- Sample programs: identify an even number, maximum number in a list,
  divisibility of two integers (home)

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

*Maximum number in a list:*
- *Write* a function called ~find_max~ that takes a list of numbers as a
  parameter and returns the maximum value in the list. If the list is
  empty, the function should return ~None~.

- You did this in class using the built-in ~max~ function. For this
  assignment, come up with your own algorithm and *do not use* ~max~.

- *Test* the function by calling it with these sample arguments:
  #+begin_example python
    print(find_max([2, 4, 6, 8, 10]))  # Output: 10
    print(find_max([]))  # Output: None
  #+end_example

- *Submit* the link to your appropriately documented Colab file [[https://lyon.instructure.com/courses/1700/assignments/14867][here in
  Canvas]]. This means text cells for problem description, script
  solution and testing suite, and references ([[https://gist.github.com/birkenkrahe/1b15fe6b573d22c5af08dc9584cfc086][like here]]), with
  headlines and code highlighted.

* DONE Day 12: Global scope/exception handling
#+attr_latex: :width 400px
#+caption: Llyfrgell Genedlaethol Cymru / Llanfachraeth in darkness (1957)
[[../img/lists.jpg]]

Friday: quick project update - informal "sprint review"
- How're you doing?
- Any questions?
- Informal presentation and discussion
** A bit traumatized by this image (as a German)
#+attr_latex: :width 400px
#+caption: Great Garden Gnome Massacre (via Twitter)
[[../img/massacre.jpg]]

"The Great German Garden Gnome Massacre"

** Preview and review

1) What is the difference between a function and a function call?
   #+begin_quote
   - A function is an executable object, a block of reusable code that
     performs a specific task, a function call is an instance of that
     object with or without arguments passed to the function.
     #+begin_src python :results silent
       def greet(name):
           print(f'Hello, {name}!')
     #+end_src
   - A function call is the code used to call the function to action,
     by entering the function name followed by parentheses ~()~. Inside
     the parentheses, any arguments that match the parameters in the
     function definition must be matched.
     #+begin_src python
       greet('Alice')
     #+end_src

     #+RESULTS:
     : Hello, Alice!
   #+end_quote

2) How many global scopes are there in a Python program? How many
   local scopes?
   #+begin_quote
   - There is only one global scope. It remains in existence until the
     program terminates.
   - There are as many local scopes as there are function calls
     executed during the program run. Each function call creates a new
     local scope that ends when the program returns from the function
     call.
   #+end_quote

3) What happens to variables in a local scope when the function call
   returns?
   #+begin_quote
   They are destroyed.
   #+end_quote

4) What is a return value? Can a return value be part of an
   expression?
   #+begin_quote
   - A return value is a value that is returned by a function. If the
     function has no ~return~ statement, only ~None~ is returned.
   - A return value can be part of an expression.
   #+end_quote
   #+begin_src python
     def return_demo(x):
         return x * 2
     print(return_demo(2))
   #+end_src

   #+RESULTS:
   : 4

5) What's another name for /constant/ in Python?
   #+begin_quote
   A literal.
   #+end_quote

6) If a function does not have a return statement, what is the return
   value of a call to that function?
   #+begin_quote
   The non-value or missing value ~None~. Same if the function has a
   ~return~ statement without an expression following it.
   #+end_quote

7) What is the data type of None?
   #+begin_quote
   It has its own ~None~ data type, called ~NoneType~.
   #+end_quote

8) What does the ~import areallyourpetsnamederic~ statement do?
   #+begin_quote
   It imports the module ~areallyourpetsnamederic~ if this module was
   installed. Otherwise it gives an ~ModuleNotFoundError~.
   #+end_quote

9) If you had a function named ~bacon()~ in a module named ~spam~, how
   would you call it after importing ~spam~?
   #+begin_quote
   As ~spam.bacon()~.
   #+end_quote

10) In which order do the keyword parameters ~end~, ~sep~, ~file~ and ~flush~
    have to be written? (These are ~print~ parameters.)
    #+begin_quote
    As long as you use their names, as in ~end=' '~, or ~sep=','~, they
    can be in any order as long as they come after the positional
    argument ~value~.
    #+end_quote

11) How can you list and view files from the IPython shell in Colab?
    #+begin_example python
    %ls -l hello.py  # long listing of the file `hello.py`
    %cat test.txt    # view the file `test.txt`
    #+end_example

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

- The ~global~ statement
- Four rules to tell which scope a variable is in
- Identifying global and local scope variables
- Exception handling with ~try~ and ~except~
- Cannot access local variable (~UnboundLocalError~)
- ~try~ statement with ~finally~ and ~else~
- Short zig-zag animation program with ~sys.exit~ (~KeyboardInterrupt~)

** Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

*Division exception handling*:
- Write a function ~div~ that asks the user to enter two numbers ~num1~
  and ~num2~ (with ~input~) and divides the first number by the second
  number.

- Inside the function, handle two potential exceptions: 1) division by
  zero, and 2) invalid input (

- Tip: do this with ~try~ and ~except~ and check out which errors are
  raised when dividing by zero or providing invalid input.

- Tip: You can stack ~except~ clauses like shown here:
  #+begin_example python
    try:
       [do something]
    except ErrorType1:
       [print something]
    except ErrorType2:
       [print something]
  #+end_example

- Sample input/output session:
  #+attr_html: :width 400px
  [[../img/6_div.png]]

- Submit the link to your appropriately documented Colab file [[https://lyon.instructure.com/courses/1700/assignments/14906][here in
  Canvas]]. This means text cells for problem description, script
  solution and testing suite, and references (like here), with
  headlines and code highlighted.

* TODO Day 13: Lists/Methods/References
#+attr_latex: :width 400px
#+caption: Llyfrgell Genedlaethol Cymru / double wedding at Llanrhaeadr (1954)
[[../img/gameoflife.jpg]]

*Congratulations! We've passed the half-way point!*

*Upcoming deadlines (import your Canvas calendar to Google!):*
- DataCamp "Introduction to Python" complete by Friday, *June 9.*
- Test 2 complete by Sunday, *June 11.*
- Optional bonus assignments (*June 9-15*):
  + I'll check throughout but points will be applied to final grade
- DataCamp "Intermediate Python" complete by Thursday, *June 22.*
  + pace yourself! Don't go bulimic on online classes!
  + for example: do 1/3 of a lesson per day = 15 days for course 2

** TODO Preview and review

1) How can you force a variable in a function to become ~global~?
   #+begin_quote
   With a ~global~ keyword before the variable name on a line of its
   own, or by using it in an assignment outside of a function.
   #+end_quote
2) How many global and how many local variables do you see here?
   #+begin_src python
     var1 = "Hello"
     var2 = "World"

     def my_function():
         var1 = "OpenAI"
         var2 = "GPT-3"
         print(var1, var2)

     my_function()
     print(var1, var2)
   #+end_src
   Answer:
   #+begin_src python
     # Global variables
     global_var1 = "Hello"
     global_var2 = "World"

     def my_function():
         # Local variables
         local_var1 = "OpenAI"
         local_var2 = "GPT-3"
         print(f'Local variables: {local_var1}, {local_var2}')

     # Call the function
     my_function()

     # Print global variables
     print(f'Global variables: {global_var1}, {global_var2}')
   #+end_src

   #+RESULTS:
   : Local variables: OpenAI, GPT-3
   : Global variables: Hello, World
3) What is the output when you run this code? (Source: [[https://twitter.com/driscollis/status/1665702110950993920?s=20][Twitter]].)
   #+begin_src python
     number = 8

     def adder(integer):
         print(number)
         number = 10
         print(number + integer)

     adder(5)
   #+end_src
   - [ ] 8 and then an exception is raised
   - [ ] ~NameError~
   - [ ] ~TypeError~
   - [ ] ~UnboundLocalError~

   #+begin_quote
   Answer: ~UnboundLocalError~ because inside the function, ~number~ is a
   local variable (it's assigned below) and you're trying to use it
   before it has been assigned a value.
   #+end_quote
4) What is the purpose of 'exception handling'?
   #+begin_quote
   The purpose of exception handling is to provide a way to transfer
   control from one part of a program to another. When an error
   occurs, the normal flow of the program is halted and control is
   transferred to the exception handling code.
   #+end_quote
5) What is the purpose and structure of ~except~ statements?
   #+begin_quote
   - The ~except~ statement is triggered when the ~try~ clause fails.
   - Optionally, ~except~ is followed by one or more system errors.
   - These errors can be parallelized like ~(ValueError,NameError)~, or
     serialized (~except: ValueError~ and ~except: NameError~).
   - The ~finally~ clause identifies an action that always happens.
   #+end_quote
   
** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

*** (Bonus) Element-wise list operations

In the introductory Python course, Hugo shows that this Python code to
calculate BMI based on height and weight stored in different lists
raises a ~TypeError~ because Python "has no idea how to do calculations
on lists."
#+begin_src python
  height = [1.73, 1.68, 1.71, 1.89, 1.79]
  weight = [65.4, 59.2, 63.6, 88.4, 68.7]
  weight / height ** 2
#+end_src
He goes on to say: "You could solve this by going through each list
element one after the other, and calculating the BMI for each person
separately, but this is terribly inefficient and tiresome to write."

Write code to achieve exactly this (it's not actually that 'tiresome
to write'):
1) Calculate BMI = weight / height ** 2 for the lists shown above.
2) Print the resulting numbers. Sample output looks like this:
#+begin_example
  21.85171572722109
  20.97505668934241
  21.750282138093777
  24.74734749867025
  21.44127836209856
#+end_example

Submit a link to an appropriately documented Colab notebook for bonus
points [[https://lyon.instructure.com/courses/1700/assignments/14917][here in Canvas]] no later than June 15.

Bonus: Use the ~%timeit~ magic function in Colab to time the calculation
of the BMI with and without NumPy. For example, to run a the
corresponding BMI computation in NumPy 100 times and repeat this run
10 times, you write:
#+begin_example python
%timeit -n 100 -r 10 bmi = weight_np / height_np ** 2
#+end_example

*** Programming assignment III: Collatz' sequence

- Write a function
- Call a function with user input
- (Optional) Make program safe with exception handling
- [[https://lyon.instructure.com/courses/1700/assignments/14754][Submission details in Canvas]]

* TODO Day 14: Dictionaries/Game of Life/Zen of Python
#+attr_latex: :width 400px
#+caption: Llyfrgell Genedlaethol Cymru / Longden Bay Go-cart Racers (1953)
[[../img/dictionary.jpg]]

** No class on Mon 15-June: work on your project instead
** Test 3 is coming - includes Numpy (DataCamp)

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]


* TODO Day 15: String manipulation with ~string~
#+attr_latex: :width 400px
#+caption: Flanzaleys String Quartet (LOC@Flickr.com)
[[../img/strings.jpg]]

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* TODO Day 16: Pattern matching with ~RegEx~
#+attr_latex: :width 400px
#+caption: USAF B-25 bomber above European patchwork landscape (1940)
[[../img/pattern.jpg]]

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* TODO Day 17: File manipulation with ~shutil~
#+attr_latex: :width 400px
#+caption: Cottage loaves baked in an ancient oven at Llanrhaeadr-ym-Mochnant
[[../img/oven.jpg]]

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* TODO Day 18: * Web scraping - ~beautiful soup~
#+attr_latex: :width 400px
#+caption: Photo: Sam Hood / Schoolchildren line up for soup (1934)
[[../img/soup.jpg]]

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* TODO Day 19: * Spreadsheets and SQL databases
#+attr_latex: :width 400px
#+caption: Photo: Sam Hood / Schoolchildren line up for soup (1934)
[[../img/spreadsheets.jpg]]

** Test 4 is coming - includes "Intermediate R"

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]


* TODO Day 20: Data visualization - ~matplotlib~
#+attr_latex: :width 400px
#+caption: Music on Water Street, St. John's, Newfoundland (Flickr.com).
[[../img/photogenic.jpg]]

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* TODO Day 21: * Machine learning with ~sklearn~
#+attr_latex: :width 400px
#+caption: Llyfrgell Genedlaethol Cymru / Redman's hairdressers (1957)
[[../img/hairdressers.jpg]]

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* TODO Day 22: 2 project presentations
#+attr_latex: :width 400px
#+caption: Group, Flickr.com
[[../img/group1.jpg]]

* TODO Day 23: 2 project presentations
#+attr_latex: :width 400px
#+caption: Library of Virginia, family portrait.
[[../img/group2.jpg]]

* TODO Day 24: 2 project presentations/Summary/Outlook
#+attr_latex: :width 400px
#+caption: Whiteman group, LOC@Flickr.com
[[../img/group3.jpg]]

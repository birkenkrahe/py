#+TITLE: Agenda - Introduction to programming in Python
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Lyon College, Summer school 2023
#+STARTUP:overview hideblocks indent inlineimages
#+OPTIONS: toc:nil num:nil ^:nil
#+property: header-args:R :results output :noweb yes :session *R* :exports both
* Day 1: Entry survey analysis and course overview 
#+attr_latex: :width 300px
[[../img/dataScientistIn50days.jpg]]

- [X] Go to Canvas ([[https://lyon.instructure.com/courses/1700][lyon.instructure.com]])
- [X] Open Zoom ([[https://lyon-edu.zoom.us/j/85828233316][lyon-edu.zoom.us/j/85828233316]])
- [X] Entry *survey* - [[https://docs.google.com/forms/d/1yz2EtuSin3r54zMG1d_JCnnVAGb0XI8cP-Yvr7FmZbo/edit#responses][review of your responses]].
  - What is the OS and why is it relevant to programming?
  - What is the command line and why is it important?
  - Which languages do you already know (10!): FORTRAN, Visual BASIC,
    SQL, R, Stata, Java, C#, Python,C,Lua
  - Topics wanted: 1) *webscraping*, 2) *Machine learning*, 3) Cybersecurity[fn:1]
  - Tools: VS Code/Emacs IDEs known
  - Terror: I will never show up drunk (in class or anywhere)
  - Time: 120 min in class, 180 min outside of class (per day)
    1) class: 15 min check in and review
    2) class: 90 min lecture + practice
    3) class: 15 min summary, questions, outlook
    4) home: 30-90 min DataCamp + 60-120 min revision/assignments
- [ ] Course *overview* - assignments, grading, topics, platforms.
- [ ] *Practice:* a first (literate) Python program & platforms.
- [ ] First *assignment*: "Getting started in Python" @DataCamp.

** In-class summary

- The terminal allows the user to communicate with the OS.
- Python comes in different versions.
- Python (and all apps) need to be built/compiled for an OS.
- Microsoft (and others) combines technical and commercial interests.
- Python [the interpreter] is written in C.
- There are (many) different layers of software between user and
  machine (which leads to greater usability/lower performance).

** Homework

- Register with GitHub, DataCamp, replit.com
- Get access to Canvas for materials and for Zoom
- "Infinite skills" exercise

* Day 2: Python scripting infrastructure practice I
#+attr_latex: :width 300px
[[../img/0_highways.jpg]]

(A [[https://github.com/birkenkrahe/py/][PDF and an Org-mode version of this exercise]] are on GitHub)

** Infinite skills - infinite resources
#+attr_latex: :width 200px
[[../img/infinite.jpg]]

[[https://lyon.instructure.com/courses/1700/discussion_topics/4347][Canvas announcement]]

- A math app that you cannot cheat with - an honor math app
- A resource matching app: e.g. match labor supply with demand (really
  efficiently), possibly including a market and negotiation engine
- A game where the world generates itself as soon as you reach the end
  of it including quest lines, NPCs
- An Internet Wayback machine without the snags where you can retrieve
  a version of a website fast and very granularly
- A script that can reach into SQL and pull values out of a column to
  monitor daily changes in the columns, e.g. money

#+begin_quote
My infinite skills Python projects:
1. An application that lets students know which remote or in-person
   data science internships are currently available in the USA.
2. An application that predicts cancer risk from medical images with
   no false negatives (i.e. images that show cancer but were not
   labeled as such).
3. An application that shows me the (publicly available) syllabi of
   all courses (world-wide) with the title and content of my upcoming
   courses.
4. An application that provides real-time insight into Lyon College
   data, especially retention, grade average, finance, incoming
   students, alumni vs. visitor data.
5. An application that finds funding opportunities, pre-fills them
   with available data (publications, personal, location) and
   identifies next steps.
6. An application based on a speech assistant coupled with a
   conversational chat bot that submits: early alerts, grades,
   summaries after each class as announcements.
#+end_quote

** Day review (and test preview)
#+attr_latex: :width 300px
#+caption: Family packing fruit, Sydneay 1911 (Flickr.com)
[[../img/review.jpg]]

/We review yesterday's material. These questions will resurface in the
weekly multiple-choice tests, i.e. you can use this to prepare./

1) What's a computer terminal?
   - A window to communicate with the Operating System (OS)
   - A command line interface (CLI)
   - A place to enter shell commands (like ~cd~)

2) What are three strengths and three weaknesses of Python?
   | STRENGTH                     | WEAKNESS                |
   |------------------------------+-------------------------|
   | Easy to learn and to read    | Performance (speed)     |
   | Data science applications    | Significant indentation |
   | Automation and small scripts | Platform requirements   |

3) What language is the Python interpreter written in?
   #+begin_quote
   Answer: in the C programming language (which allows programming
   'close to the machine' (making full use of its resources).
   #+end_quote

4) What are we going to use Schoology for in this course?
   #+begin_quote
   Answer: for nothing. We use the Canvas learning management system,
   GitHub, DataCamp, replit.com, IDLE and Google Colaboratory.
   #+end_quote
   
5) What's our policy regarding the use of AI coding assistants?
   #+begin_quote
   Answer: it's allowed as long as you reference and document your
   use.
   #+end_quote

6) What does Google Colab provide but Python's IDLE does not?
   #+begin_quote
   Answer: An interactive notebook
   #+end_quote

7) What's the difference between a compiled language (for example C)
   vs. an interpreted language (for example Python or R)?
   #+begin_quote
   - Compiler: Human-readable source code is compiled to a
     machine-readable file that needs to be executed for results.
   - Interpreter: source code is read and executed line by line at
     runtime, and no executable file is produced.
   - Both compiler and interpreter are specific to the underlying
     computer architecture.
   #+end_quote

** Practice
#+attr_latex: :width 300px
#+caption: RAAF crew woring on newly arrived Lockheed aircraft (1940)
[[../img/practice.jpg]]

- Find Python on your computer
- Find Python for download to your PC on the web
- Starting and using Google Colab, IDLE, DataCamp and replit.com
- Understand the "literate programming concept"
- Understand when we're using Colab + IDLE + replit.com
- Options for creating and running Python scripts
- Creating and running our first ever Python script

** In-class summary - what did we discuss today?
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].
- Practice file as PDF ([[https://github.com/birkenkrahe/py/blob/main/pdf/0_course_practice.pdf][class handout]])
- Windows' Command Line Interface: finding and opening the terminal,
  prompt, absolute/relative path, root and file tree, CLI commands and
  options; ~cd~, ~python~, ~ls~, ~whoami~.
- Python's IDLE: interactive shell ~>>>~, getting ~help()~ and finding
  documentation; Python keywords, symbols and modules (libraries).
- Python's file editor: printing a greeting in Python (hello world)
  with ~print~. Default arguments. Comments (~#~), ~.py~ file types,
  debugger and traceback. Keyboard interrupt (~CTRL + c~).
- Literate programming: weaving documentation and tangling source code
  from a literate file that contains text + code + output. With Emacs:
  one document with code in < 44 languages.
- Google's Colab: code and text cells, scratch cell, GDrive backup,
  GitHub gist export, auto-completion, interactive notebooks with
  IPython (~.ipynb~), ~matplotlib~ and ~numpy~ modules. ~import~, lineplot
  with ~pyplot~. Colab dashboard. Markdown with ~#~ (headline).

** Homework: first assignment
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

- The problem: [[https://lyon.instructure.com/courses/1700/assignments/14493][word count]].
- Requirements:
  1) Google Colab (platform for submission)
  2) String manipulation (function ~str.count~)
  3) Getting input (function ~input~)
  4) Storing variables with ~=~
  5) Printing numeric output as string with ~str~
  6) Bonus: nesting functions

* Day 3: Infrastructure practice II: DataCamp, REPL
#+attr_latex: :width 400px
#+caption: Obituary page for Jason Anderson (willisfs.com)
[[../img/jason.png]]

Change of plans: *We will *not meet in class on Thursday, 24 May*. I'd
like to be able to attend both the visitation and the memorial service
for Jason Anderson ([[https://www.willisfs.com/obituary/Jason-Anderson][â€ ]]) myself tomorrow from 1 pm - 3 pm (Brown
Chapel).

Instead, please work through the remainder of the practice file
(handout and [[https://github.com/birkenkrahe/py/blob/main/pdf/0_course_practice.pdf][here on GitHub]]) *on your own*. Both sessions can be done
online from the comfort of your home:
1) Open a browser with two windows, and work through the exercises for
   replit.com and DataCamp workspaces line by line.
2) Essentially, both environments offer file editor + interactive
   Python shell + OS shell in one window.
3) Replit.com is more like IDLE, while the DataCamp workspace is an
   interactive notebook like Colab.
4) Python-wise, this is essentially "hello world" again.

This shouldn't take more than an hour. Use the remaining time to get
started with your [[https://app.datacamp.com/groups/lyon-college-data-science-spring-2023/assignments][DataCamp assignments]] (15 chapters in total,
requiring no less than 15 hours of practice).

In the middle of our taking off for flight, it might be worthwhile
highlighting some logistics to help you review past sessions if you so
choose:

1) You can find the *session review/test preview* information, and a
   summary of the last session in the agenda file here in GitHub
   ([[https://github.com/birkenkrahe/py/blob/main/pdf/agenda.pdf][PDF]] or [[https://github.com/birkenkrahe/py/blob/main/org/agenda.org][HTML]]).
2) You can find all *practice and lecture files* in the PDF directory
   here in GitHub ([[https://github.com/birkenkrahe/py/tree/main/pdf][PDF]] or [[https://github.com/birkenkrahe/py/tree/main/org][HTML]]): I just went through it myself to
   review today.
3) Lastly, photos of the *whiteboard* writings and drawings are
   available [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][here in GDrive]].

I'm looking forward to seeing you on Friday to cover Python
expressions, variables and statements with more practice exercises.

Any questions, you know where to find me!

Cheers

* Day 4: Expressions, Variables, Statements
#+attr_latex: :width 400px
#+caption: Thirteen men doing acrobatics (LOC)
[[../img/acrobats.jpg]]

** Adding the course calendar to Google calendar
#+attr_latex: :width 400px
#+caption: Canvas calendar with course events
[[../img/calendar.png]]

- Find ~Calendar~ in leftmost Canvas sidebar
- Check "Introduction to Programming in Python"
- Click ~Calendar Feed~ (lower right)
- Import URL in Google calendar

** Using Python chat in GMail outside class
#+attr_latex: :width 400px
#+caption: Google Python chat space members
[[../img/space.png]]

** Day review (and test preview)
#+attr_latex: :width 300px
#+caption: Family packing fruit, Sydneay 1911 (Flickr.com)
[[../img/review.jpg]]

/We review yesterday's material. These questions will resurface in the
weekly multiple-choice tests, i.e. you can use this to prepare./

1) What's the difference between an absolute and a relative path?
   #+begin_quote
   Answer: The *absolute* path always begins at the root directory, the
   origin of the file tree (e.g. ~C:\~ on Windows, or ~/~ on Linux), while
   the *relative* path specifies a location relative to your current
   directory (~PWD~).
   #+end_quote

2) You know 4 different Python shells already - which are they?
   #+begin_quote
   - The interactive Python shell in IDLE (~>>>~)
   - The IPython code cell in Google Colab (~[1]~)
   - The console in replit.com ~>~
   - The shell opened in a terminal with the ~python~ command
   #+end_quote
   
3) Which features does the IPython shell (e.g. in a Colab code cell)
   have?
   #+begin_quote
   - Auto-completion of keywords like ~print~ and user-defined variables
   - Integration of pre-installed modules like ~matplotlib~ for plotting
   #+end_quote
   
4) Are your Google Colab notebooks saved anywhere?
   #+begin_quote
   Yes, they are automatically saved in the ~Colab Notebooks~ directory
   in your Google drive (~w:\My Drive\~ on Windows @Lyon).
   #+end_quote

5) What can you do with the ~#~ symbol?
   #+begin_quote
   - Comment lines in a ~.py~ Python file
   - Comment on the interactive Python shell
   - Create headlines in a Colab text cell ("markdown markup")
   #+end_quote

6) What does DataCamp workspace offer?
   #+begin_quote
    - Linux shell
    - Interactive Python console
    - Python file editor
    - Interactive Jupyter notebook
    - plus a few JupyterLab gadgets (launcher)
   #+end_quote

** DataCamp lessons / practice
#+attr_html: :width 200px
[[../img/datacamp_practice.png]] [[../img/datacamp_practice1.png]] [[../img/datacamp_practice2.png]] [[../img/datacamp_practice3.png]]

Some questions for test 1 will come from the "Python Basics" chapter
of the "Introduction to Python" course on DataCamp (you can practice).

Please note the (new) [[https://lyon.instructure.com/courses/1700/assignments][deadlines for the three DataCamp courses]]. These
courses amount to 60% of the home assignment grade. The remaining
points will come from 8 programming assignments (like "word count").

** Lecture/practice: Python Basics
#+attr_latex: :width 300px
#+caption: Lecture renversante by Totoffff (Flickr.com)
[[../img/lecture.jpg]]

- Expressions
- Variables
- Statements

** In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- An instruction that evaluates to a single value is an
  *expression*. An instruction that doesn't is a *statement*.
- Data types are: integer (~int~), floating-point (~float~), string (~str~)
- Strings hold text and begin and end with quotes: ~â€˜Hello world!'~
- Strings can be concatenated (~+~) and replicated (~*~)
- Values can be stored in variables: ~spam = 42~
- Variables can be used anywhere where values can be used in
  expressions: ~spam + 1~
- Variable names: one word, letters, numbers (not at beginning),
  underscore only

* Day 5: Flow control and flow visualization
#+attr_latex: :width 400px
#+caption: Roman Guy, Against the Flow (Flickr.com)
[[../img/flow.jpg]]

** TODO It's a wrap: ~'hello world' * 3~



** TODO The caret ~^~ operator in Python

- Use ~**~ for exponentiation and not ~^~ (as in R). In Python, the caret
  operator ~^~ is the binary ~XOR~ operator: it compares two binary
  numbers and returns a binary with bits set to 1 where the
  corresponding bits of the operations differ:
  #+begin_src python :results output 
  print(2**4)
  print(2^4)
  print('binary: ', bin(2)[2:])
  print('binary: ', bin(4)[2:])
  print('binary: ', bin(6)[2:])
  #+end_src

  #+RESULTS:
  : 16
  : 6
  : binary:  10
  : binary:  100
  : binary:  110

** TODO In-class summary
#+attr_latex: :width 300px
#+caption: Women spectators at wrestling, Sydney stadium 1940 (Flickr.com)
[[../img/summary.jpg]]

- [[https://drive.google.com/drive/folders/1IEkIHzieBJ_tS5GPigsCxRZcioanlPof?usp=sharing][See also the whiteboard photos from the class session in GDrive]].

** TODO Homework: 
#+attr_latex: :width 300px
#+caption: Max Williams photographed by Ian Grimes, 1942 (Flickr.com)
[[../img/homework.jpg]]

* Day 6
* Day 7 
* Day 8
* Day 9
* Day 10 
* Day 11 
* Day 12 
* Day 13 
* Day 14 
* Day 15
* Day 16
* Day 17
* Day 18
* Day 19
* Day 20
* Day 21
* Day 22
* Day 23: Project presentations
* Day 24: Project presentations / Summary / Outlook
* Footnotes
[fn:1]Webscraping Excel manipulation and Machine Learning are already
part of my plan, but cybersecurity is currently not included (except
indirectly through the command line and string manipulation skills).

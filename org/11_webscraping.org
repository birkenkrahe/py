#+TITLE:WEBSCRAPING WITH PYTHON
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 109 - Introduction to programming in Python - Summer 2023
#+property: header-args:python :results output :exports both
#+startup: overview hideblocks indent inlineimages
* README

- This is an outline of several webscraping packages:
  1) ~webbrowser~ - to ~open~ web pages
  2) ~requests~ - to download files and web pages
  3) ~bs4~ - to parse HTML source files
  4) ~selenium~ - to launch and control a web browser

- The development follows chapter 12 (pp. 267-299) in Sweigart (2019)
  and the publicly available documentation for the packages:
  1) [[https://docs.python.org/3/library/webbrowser.html][webbrowser (standard library)]]

- There are some good tutorials from the DataCamp blog:
  1) [[https://www.datacamp.com/tutorial/web-scraping-python-nlp][Web Scraping & NLP in Python (DataCamp tutorial)]] (2017).
  2) [[https://www.datacamp.com/tutorial/web-scraping-using-python][Web Scraping using Python (and Beautiful Soup)]] (2018).
  3) [[https://www.datacamp.com/tutorial/making-web-crawlers-scrapy-python][Making Web Crawlers Using Scrapy for Python]] (2019)

- However, web development is a highly volatile field, with many
  different languages, technologies and standards involved, and I
  would not expect the code from older tutorials to work out of the
  box.

- Making it work nevertheless, however, is a great way to learn about
  a package.

* Using ~webbrowser~ to open a URL

- The ~webbrowser~ module provides an interface to displaying web-based
  documents to users.

- You can call the ~open~ function on the URL to open the page:
  #+begin_src python :results silent
    import webbrowser
    url = 'https://www.gutenberg.org/files/2701/2701-h/2701-h.htm'
    webbrowser.open(url)
    url = 'https://lyon.edu'
    webbrowser.open(url)
    url = 'https://www.python.org'
    webbrowser.open(url)
  #+end_src

- The script ~webbrowser~ can also be used on the command line. Enter
  this in a terminal window:
  #+begin_example sh
    python -m webbrowser -t "https://www.python.org"
  #+end_example

- These will not work in Colab but they work on the terminal or in a
  Python script.

- As long as you have the URL, ~webbrowser~ lets users cut out the step
  of opening the browser. Sample applications (scripts) include:
  1) open all links on a page in separate browser tabs
  2) open the browser to the URL for your local weather
  3) open several social network sites that you regularly check.

* Example: open Google map with an address only

- We create a script that is run on the command line by the shell
  program (~bash~) though it is a Python file.

- The shell passes an address argument to the script where it is
  received as a list of strings ~sys.argv~.

- To turn the list into a single string value ~address~ (a URL for the
  browser), use ~str.join~, then feed the ~address~ to ~webbrowser.open~.

- You find this script in GitHub in ~py/src~ as ~mapit~ (link):
  #+begin_src sh
    #! python3
    # launch map in browser using an address from the command line
    # import pyperclip and use address = pyperclip.paste for clipboard use

    import webbrowser, sys

    # If there is at least one command line argument
    if len(sys.argv) > 1:
       address = ' '.join(sys.argv[1:])

       # Open the web browser with the constructed URL
       webbrowser.open('https://www.google.com/maps/place/' + address)

    # Write sys.argv to a file and print to the screen
    filename = "address.txt"
    with open(filename, "w") as file:
        print("Contents of sys.argv:")
        for arg in sys.argv:
            # Write each argument to the file
            file.write(arg + "\n")
            # Print confirmation message
            print(f"sys.argv has been written to {filename}")
  #+end_src

- Download it, open a terminal and run it with an address like this:
  #+begin_src sh
    ./mapit 1014 E Main St, Batesville, AR 72501
  #+end_src

- This will open Google maps to the address and save the list values
  to a file ~address.txt~ which you can view with the command ~cat~.

* Savings

This is what getting a map with or without Python has cost you:
| MANUALLY                     | PYTHON            |
|------------------------------+-------------------|
| Highlight address            | Highlight address |
| Copy address                 | Copy address      |
| Open web browser             | Run ~mapit~         |
| Open ~maps.google.com~         |                   |
| Click the address text field |                   |
| Paste the address            |                   |
| Press enter                  |                   |

* Using ~requests~ to download files from the web

- With ~requests~, you can download files without having to worry about
  network errors, connection problems or data compression.

- This is the equivalent of the ~wget~ Unix command (similar to ~curl~,
  which supports a wide variety of protocols not just HTTP and FTP)

- This package is not part of the standard Python library and must be
  installed (not on Colab or DataCamp):
  #+begin_src sh
    pip install --user requests  # installs for current user only
  #+end_src  

  #+RESULTS:
  | Requirement | already | satisfied: | requests                 | in | c:\users\birkenkrahe\appdata\local\programs\python\python311\lib\site-packages | (2.29.0) |           |             |
  | Requirement | already | satisfied: | charset-normalizer<4,>=2 | in | c:\users\birkenkrahe\appdata\local\programs\python\python311\lib\site-packages | (from    | requests) | (3.1.0)     |
  | Requirement | already | satisfied: | idna<4,>=2.5             | in | c:\users\birkenkrahe\appdata\local\programs\python\python311\lib\site-packages | (from    | requests) | (3.4)       |
  | Requirement | already | satisfied: | urllib3<1.27,>=1.21.1    | in | c:\users\birkenkrahe\appdata\local\programs\python\python311\lib\site-packages | (from    | requests) | (1.26.15)   |
  | Requirement | already | satisfied: | certifi>=2017.4.17       | in | c:\users\birkenkrahe\appdata\local\programs\python\python311\lib\site-packages | (from    | requests) | (2022.12.7) |

- Test that ~requests~ installed alright:
  #+begin_src python :results silent
    import requests
  #+end_src
  
* Download a web page with ~requests.get~

- The ~requests.get~ function takes a string of a URL to download. Check
  out the ~type~ of the return value of this function.

- Remember that to check the return value, you need to save the
  function call itself in a variable and print it:
  #+begin_src python
    import requests

    res = requests.get(
  #+end_src

  #+RESULTS:
  : <class 'function'>

* References

- Sweigart, A. (2019). Automate the Boring Stuff with
  Python. NoStarch. URL: [[https://automatetheboringstuff.com/2e/chapter2/][automatetheboringstuff.com]]
- Van Rossum, G., Drake, F. L. (2009). Python 3 Reference Manual. URL:
  https://docs.python.org/3/reference/.

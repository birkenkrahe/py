#+TITLE:PYTHON BASICS
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: CSC 109 - Introduction to programming in Python - Summer 2023
#+STARTUP: overview hideblocks indent inlineimages
#+PROPERTY: header-args:python :results output :exports both :session *Python*
* Python Basics

- Python is a rich high-level programming language (like C or R) with
  many features. To master it takes a long time (5-10 years).

- To write handy little programs that automate 'boring' tasks, you
  only need some basics:
  1) expressions 2 + 2
  2) data types  integer
  3) variables  spam
  4) statements spam = 1
  5) debugging dealing with errors

- When I lecture, you should always keep Python open to code along:
  1) Google Colab notebook
  2) IDLE interactive shell
  3) ~python~ on the command line
  4) Console in replit.com or DataCamp workspace

- The code is available as [[https://gist.github.com/birkenkrahe/445237c66cb015ca243c3c5fe40f9888][GitHub gist]] and in the ~ipynb~ directory.

* Expressions: values and operators ([[https://gist.github.com/birkenkrahe/6fc1fca1e9021e0837175d41972bcb29][gist]])

- Open an interactive Python shell. I have changed the default
  settings in Colab to open with a "scratchpad" (not saved!).

- Enter the classic formula ~2 + 2~ at the prompt and press ~RET~ (Enter)
  to (hopefully) get the classic answer ~4~.

- In Colab, if you run your code with ~SHIFT + ENTER~, you get a new
  code cell right away. If you us ~CTRL + ENTER~ you get nothing but now
  you can add a text cell below with ~CTRL + ALT + t~

- ~2 + 2~ is called an /expression/, a basic programming instruction.

- An expression consist of /values/ (such as ~2~) in computer memory, and
  /operators/ (such as the binary operator ~+~), which are /functions/.

- Expressions can always /evaluate/ i.e. reduce to a single value - so
  you can e.g. use ~2+2~ anywhere instead of ~4~ because you know it's
  going to be reduced to ~4~.

- Examples:
  1) use ~2+2~ as the /argument/ of a ~print~ function.
  2) use ~2+2~ as the argument of a ~str~ function.

- A single value like ~2~ is also an expression (it doesn't express
  anything else but itself) and evaluates to itself.

* Error messages

- When Python cannot evaluate an expression, it "throws" an
  error. Here is [[http://inventwithpython.com/appendixd.html][list of common error messages]] in Python with a plain
  English explanation (Sweigart, 2019).

- Let's create a couple of error messages using wrong expressions:
  1) Enter ~2 +~
  2) Enter ~2 + '2'~
  3) Enter ~2~ and then on the next line enter ~2~ again in the 2nd column
  4) Enter ~2 + ++ 2~ then change the first ~+~ to a ~-~

* Operators

- The table shows a lit of all math operators in Python. They are
  listed from highest to lowest precedence:
  #+attr_latex: :width 400px
  [[../img/py_ops.png]]
     
- The precedence is the order of operations: when Python gets an
  expression with more than one operator, it evaluates from left to
  right (you can force execution with parentheses).

- For example, the expression ~-2+24/8~ is evaluated as ~1~ and not as
  ~2.75~ because ~(24/8)=3~ and ~3-2=1~:
  1) Enter ~-2 + 24 / 8~
  2) Enter ~(-2 + 24) / 8~

- So-called "whitespace" (empty space) between symbols does not
  matter, so ~24/8~ is evaluated identically to ~24 / 8~.

- Enter the following expressions into the interactive shell:
  #+begin_example python
  2 + 3 * 6
  (2 + 3) * 6
  48565857 * 578453
  2 ** 8
  23 / 7
  23 // 7
  2      +     2
  (5 - 1) * ((7 + 1 ) / (3 - 1))
  #+end_example

- You should get this result:
  #+attr_latex: :width 400px
  #+caption: Expressions in the interactive Python shell (in Emacs)
  [[../img/py_ops_example.png]]
  
- The next diagram shows how Python ruthlessly evaluates parts of the
  expression until it has reached a single value:
  #+attr_latex: :width 250px
  #+caption: Evaluation of composite expression to a single value
  [[../img/py_ops_example1.png]]

* Variables

- A data type is a category for values: every value belongs to exactly
  one data type.

- Variables in Python do not need to be declared but they are
  dynamically typed, i.e. at runtime.

- Common data types are listed in this table:
  #+attr_latex: :width 400px
  #+caption: Common data types (Source: Sweigart, 2019)
  [[../img/1_data_types.png]]

- Python's names for these data types are: ~int~, ~float~ and ~str~.

- The ~type~ function reveals a value's or a variable's data type:
  #+begin_example python
    type(-2)
    type(2)
    type(1.25)
    type('a')
    type('name')
    type(a)
  #+end_example

- Why does ~type(a)~ give a "Name Error"? Because Python expects a
  variable named ~a~.
* String concatenation and replication

- The meaning of an operator may change based on the data types of its
  operands.

- Enter the following examples in separate code cells (otherwise you
  only get the last result - or you have to add ~print~).

- Examples:
  1) ~'Alice' + 'Bob'~
  2) ~'Alice' + 42~

- Python can only concatenate numbers or strings. You have to
  explicitly convert the 2nd argument to a string:
  1) ~'Alice' + str(42)~
  2) ~'Alice' + str(Bob)~

- Unless ~Bob~ is initialized as an integer, this will not work:
  1) ~Bob = 42~
  2) ~'Alice' + str(Bob)~

- The ~*~ operator can be used with one string and one integer value for
  replication:
  1) ~'Alice' * 'Bob'~
  2) ~'Alice' * 5.0~
  3) ~'Alice' * 5~
  4) ~'Alice' * int(5.0)~

* Assignments: storing values in variables

- A /variable/ is like a box in the computer's memory where you can
  store a single value.

- You store values in variables with an ~assignment statement~,
  consisting of: a variable name, the ~=~ operator, and the value.

- A variable is initialized or created the first time a value is
  stored in it.

- When a variable is assigned a new value, the old value is forgotten.

- To visualize this, open ~pythontutor.com~ and enter this code:
  #+begin_example python
    spam = 40
    eggs = 2
    spam + eggs
    spam + eggs + spam
    spam = spam + eggs
    print(spam)
  #+end_example

- Similarly for strings:
  #+begin_example python
    spam = 'Hello'
    print(spam)
    spam = 'Goodbye'
    print(spam)
  #+end_example

* Variable names
#+attr_latex: :width 400px
[[../img/py_variable_names.png]]

- You can name a variable anything as long as it obeys these rules:
  1. It can be only one word with no spaces
  2. It can only use letters, numbers and the underscore character (~_~)
  3. It can't begin with a number

- You should not use Python keywords, symbols, function or module
  names as your variables (though you may be allowed to).

- Variables in Python are case-sensitive.

- Some people prefer camel-case for variable names instead of
  underscores: ~helloWorld~ instead of ~hello_world~. Either is OK.

* TODO Back to 'hello world'

* TODO Summary

- An instruction that evaluates to a single value is an
  *expression*. An instruction that doesn't is a *statement*.
- Data types are: integer (~int~), floating-point (~float~), string (~str~)
- Strings hold text and begin and end with quotes: ~â€˜Hello world!'~
- Strings can be concatenated (~+~) and replicated (~*~)
- Values can be stored in variables: ~spam = 42~
- Variables can be used anywhere where values can be used in
  expressions: ~spam + 1~
- Variable names: one word, letters, numbers (not at beginning),
  underscore only

* TODO Glossary

| TERM/COMMAND | MEANING |
|--------------+---------|
|              |         |

* References

- Sweigart, A. (2016). Invent your own computer games with
  Python. NoStarch. URL: [[http://inventwithpython.com/][inventwithpython.com]].
- Sweigart, A. (2019). Automate the boring stuff with
  Python. NoStarch. URL: [[http://automatetheboringstuff.com][automatetheboringstuff.com]].
